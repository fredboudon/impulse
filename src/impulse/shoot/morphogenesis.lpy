from openalea.lpy import ParameterSet
from math import sqrt, pi

try:
  demand_only = demand_only
except NameError:
  demand_only=False 
  
try:
  carbon_seed_stock = carbon_seed_stock
except NameError:
  carbon_seed_stock= 10
  
growth_respiration=.2
internode_lineic_mass = 1
leaf_specific_mass = 1
potential_leaf_rate = 1
potential_internode_rate = 0.1

module collar(carbon)
module apex(carbon, carbon_demand): scale=1
module internode(carbon, carbon_demand, length, biomass): scale=1
module leaf(carbon, carbon_demand, area, biomass): scale=1
module bud: scale=1


Axiom: collar(0)apex(carbon_seed_stock,0)

derivation length: 10
production:
apex(carbon, carbon_demand):
  new_carbon_demand = (1 + growth_respiration) * (internode_lineic_mass * potential_internode_rate + leaf_specific_mass * potential_leaf_rate)
  if demand_only:
    produce apex(carbon, new_carbon_demand)
  else:
    satisfaction = min(1,float(carbon) / new_carbon_demand)
    ilength = potential_internode_rate * satisfaction
    ibm = ilength * internode_lineic_mass
    larea = potential_leaf_rate * satisfaction
    lbm = leaf_specific_mass * larea
    produce internode(0,0,ilength,ibm)[bud][leaf(0,0,larea,lbm)]apex(carbon - new_carbon_demand*satisfaction, new_carbon_demand)

interpretation:
internode(carbon, carbon_demand, length, biomass) --> /(137.5)F(length)
leaf(carbon, carbon_demand, area, biomass):
  radius = sqrt(area / pi)
  produce ;(2)^(45)f(radius)@o(radius)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	context.options.setSelection('Module declaration',1)
